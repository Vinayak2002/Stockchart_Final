# Create your views here.

"""
Here we create the page templates for our webpages.
These templates help us to take care of the requests generated by the webpages.
"""


from django.shortcuts import render
"""This module helps us in rendering webpages from the page templates"""

from django.http import HttpResponseRedirect
"""This module helps us in redirecting webpages from the page templates"""

import yfinance as yf
"""
This module provides the data for stocks from yahoo finance.
It provides the data in the form of pandas Dataframe.
"""

import plotly.graph_objects as go
"""This module is used to plot the candlestick chart from the stock data"""

from .models import Userdetails
"""This is the created model for storing and retrieving user details"""


def homePage(request):
    """
    This template handles the requests generated by the home page of the website.
    """

    return render(request, "home.html", {})


def signUp(request):
    """
    This template handles the requests generated by sign up page.
    It checks for duplication and generates a warning if duplication is found.
    If no duplication is found, a new user is registered in the database.
    """

    if request.method == "POST" and request.POST["email_"] != "":
        email_ = request.POST["email_"]
        password_ = request.POST["password_"]

        try:
            # Checks duplication of the email.
            object_ = Userdetails.objects.get(email=email_)
            # raises error if no such details are found in the database
            # and executes the except statement.
            context = {
                "message": "Email already exists, please login"
            }

            return render(request, "signup.html", context)

        except:
            # Registers new user details.
            Userdetails.objects.create(email=email_, password=password_)

            # After creating new user, it redirects the user to login page.
            return HttpResponseRedirect("login")

    else:
        return render(request, "signup.html", {"message": "Please enter credentials"})

    


def login(request):
    """
    This template handles the requests generated by login page.
    If valid credentials are entered then the user is redirected to visual page.
    If invalid credentials are entered then a warning is generated. 
    """

    if request.method == "POST":

        email_ = request.POST["email_"]
        password_ = request.POST["password_"]

        try:
            # Checks the existence of user in database.
            object_ = Userdetails.objects.get(email=email_)
        except:
            # If no user with given details is found, a warning is generated.
            object_ = None
            context = {
                'message': "Email Does Not Exist"
            }
            return render(request, "login.html", context)


        # Verifies the database for existing user details.
        if password_ == object_.password:
            # If user is verified then redirects to visual page.
            return HttpResponseRedirect('visual')

        else:
            # If user details are not matched then a warning is generated.
            return render(request, "login.html", {"message": "Please enter valid credentials"})

    else:
        return render(request, "login.html", {"message": "Please enter credentials"})

    


def visual(request):
    """
    This template handles the requests generated by visual page.
    If any value is missing in the form, it generates the warning regarding the same.
    If all details are entered correctly then it shows the chart of selected stock. 
    """
    if request.method == "POST":
        
        stock_name = request.POST.get('stock_name')
        interval_ = request.POST.get('interval')

        if stock_name == "Select Stock":
            # Generates warning if no stock is selected.
            return render(request, "visual.html", {"message" : "Please select a stock"})

        if interval_ == "Select Interval":
            # Generates warning if no interval is selected.
            return render(request, "visual.html", {"message" : "Please select an interval"})


        tick = yf.Ticker(stock_name) # retrieves all data of the given stock

        data = tick.history(start="2021-01-01", interval=interval_) 
        # A pandas Dataframe containing information of stock's performance in the given time interval.

        name = tick.info['longName'] # Retrieves name of the company registered to the corresponding  stock symbol.

        candlestick = go.Candlestick(x=data.index, open=data['Open'], high=data['High'], low=data['Low'], close=data['Close']) # A candlestick object is created with the corresponding input.

        fig = go.Figure(data=[candlestick]).update_layout(xaxis_rangeslider_visible=False, yaxis_title='Price(INR)')
        # A chart object is created and the data is plotted upon it.


        graph = fig.to_html(full_html=False, default_height=600, default_width=850)
        # The object is then converted to html code for the output in the webpage.

        context = {
            'graph': graph,
            'stock': name,
            "message": "Please select a stock",
        }

        return render(request, 'visual.html', context)

    else:
        return render(request, "visual.html", {"message": ""})


def demoPage(request):
    """
    This template handles the requests generated by the demo page of the website.
    It display a sample chart for the non-registered users, so that they can get idea of what this site provides.
    """
    
    return render(request, "demo.html", {})

